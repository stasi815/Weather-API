{"version":3,"sources":["components/Weather/WeatherDisplay/Temperature/Temperature.js","components/Weather/WeatherDisplay/WeatherDescription/WeatherDescription.js","components/Weather/WeatherDisplay/Atmosphere/Atmosphere.js","components/Weather/WeatherDisplay/WeatherDisplay.js","components/Weather/Weather.js","components/Navbar/navbar.js","components/Footer/footer.js","components/App.js","serviceWorker.js","index.js"],"names":["convertTemp","temp","unit","toFixed","Temperature","props","min","max","className","WeatherDescription","description","title","Atmosphere","pressure","humidity","WeatherDisplay","main","temp_min","temp_max","Weather","state","inputValue","weatherData","status","e","this","preventDefault","url","process","fetch","then","res","setState","json","catch","err","console","log","message","cod","weather","onSubmit","handleSubmit","value","onChange","target","type","pattern","placeholder","id","name","for","renderWeather","Component","Navbar","Footer","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.8917fbb0.chunk.js","sourcesContent":["import React from 'react'\nimport './Temperature.css'\n\nfunction convertTemp(temp, unit) {\n  if (unit === 'imperial') {\n    return (temp * 9/5 - 459.67).toFixed(1) + '°F'\n  } else if (unit === 'metric') {\n      return (temp - 273.15).toFixed(1) + '°C'\n  }\n  return temp + unit\n}\n\nfunction Temperature(props) {\n  const { temp, unit, min, max } = props\n    return (\n      <div>\n        <div className=\"temp\">\n          <h4>Current Temperature: {convertTemp(temp, unit)}</h4>\n        </div>\n        <div className=\"high-low\">\n          <p>Low: {convertTemp(min, unit)}</p>\n          <p>High: {convertTemp(max, unit)}</p>\n        </div>\n      </div>\n    )\n}\n\n\nexport default Temperature","import React from 'react'\nimport './WeatherDescription.css'\n\n\nfunction WeatherDescription(props) {\n  const { description, title } = props\n    return (\n      <div className=\"weather-description\">\n        <div>Title: {title}</div>\n        <div>Description: {description}</div>\n      </div>\n    )\n}\n\n\nexport default WeatherDescription","import React from 'react'\nimport './Atmosphere.css'\n\nfunction Atmosphere(props) {\n  const { pressure, humidity } = props\n    return (\n      <div>\n        <div>Humidity: {humidity}</div>\n        <div>Pressure: {pressure}</div>\n      </div>\n    )\n}\n\n\nexport default Atmosphere","import React from 'react'\nimport Temperature from './Temperature/Temperature'\nimport WeatherDescription from './WeatherDescription/WeatherDescription'\nimport Atmosphere from './Atmosphere/Atmosphere'\nimport './WeatherDisplay.css'\n\nfunction WeatherDisplay(props) {\n  const { temp, unit, main, description, pressure, humidity, temp_min, temp_max} = props\n  return (\n    <div className='weather-display'>\n    <Temperature\n      temp={temp}\n      unit={unit}\n      min={temp_min}\n      max={temp_max}\n      />\n    <div className='description'>\n      <WeatherDescription\n        title={main}\n        description={description}\n      />\n      <Atmosphere\n        pressure={pressure}\n        humidity={humidity}\n      />\n    </div>\n    </div>\n  )\n}\n\nexport default WeatherDisplay","import React, { Component } from 'react'\nimport './Weather.css'\nimport WeatherDisplay from './WeatherDisplay/WeatherDisplay'\n\nclass Weather extends Component {\n    constructor(props) {\n      super(props)\n\n      this.state = {\n        inputValue: '94010',     // Used to hold value entered in the input field\n        weatherData: null,\n        unit: 'imperial',\n        status: 'idle',\n      }\n    }\n\n    handleSubmit(e) {\n        const { inputValue } = this.state\n      e.preventDefault()\n      const apikey = process.env.REACT_APP_OPENWEATHERMAP_API_KEY\n      // Get the zip from the input\n      const zip = inputValue\n      // Temp units\n      const units = 'imperial'\n      // Form an API request URL with the apikey and zip\n      const url = `https://api.openweathermap.org/data/2.5/weather?zip=${zip},us&appid=${apikey}`\n      // Get data from the API with fetch\n      fetch(url).then(res => {\n        // Handle the response stream as JSON\n        this.setState({ status: 'loading' })\n        return res.json()\n      }).then((json) => {\n        // If the request was successful assign the data to component state\n        this.setState({ weatherData: json })\n        this.setState({ status: 'success' })\n        // It's possible to get a valid JSON response that is not weather\n        // data, for example when a bad zip code entered.\n      }).catch((err) => {\n        // If there is no data\n        this.setState({ weatherData: null }) // Clear the weather data we don't have any to display\n        // Print an error to the console.\n        console.log('-- Error fetching --')\n        console.log(err.message)\n        // You may want to display an error to the screen here.\n      })\n    }\n\n    renderWeather() {\n      const { weatherData, unit } = this.state\n      // This method returns undefined or a JSX component\n      if (weatherData === null) {\n        // If there is no data return undefined\n        return undefined\n      } else if (weatherData.cod !== 200) {\n        return <p>{weatherData.message}</p>\n      }\n\n      /*\n      This next step needs another level of error checking. It's\n      possible to get a JSON response for an invalid zip in which\n      case the step below fails.\n      */\n      console.log(weatherData)\n      // Take the weather data apart to more easily populate the component\n      const { main, description } = weatherData.weather[0]\n      const { temp, pressure, humidity, temp_min, temp_max} = weatherData.main\n\n      return (\n        <div>\n          <WeatherDisplay\n            main={main}\n            description={description}\n            temp={temp}\n            temp_min={temp_min}\n            temp_max={temp_max}\n            pressure={pressure}\n            humidity={humidity}\n            unit={unit}\n          />\n        </div>\n      )\n    }\n\n    render() {\n      const { status, inputValue } = this.state\n      return (\n        <div className=\"App\">\n\n          {/** This input uses the controlled component pattern */}\n          <form className=\"input-form\" onSubmit={e => this.handleSubmit(e)}>\n\n            {/**\n            This pattern is used for input and other form elements\n            Set the value of the input to a value held in component state\n            Set the value held in component state when a change occurs at the input\n            */}\n            <h3>Enter Zip: </h3>\n            <input\n              className=\"input-box\"\n              value={inputValue}\n              onChange={e => this.setState({ inputValue: e.target.value })}\n              type=\"text\"\n              pattern=\"(\\d{5}([\\-]\\d{4})?)\"\n              placeholder=\"enter zip\"\n            />\n            <div className=\"unit-input\">\n              <input\n                type=\"radio\"\n                id=\"imperial\"\n                name=\"unit\"\n                value=\"imperial\"\n                onChange={e => this.setState({ unit: 'imperial' })}\n              />\n              <label for=\"imperial\">Imperial</label><br/>\n              <input\n                type=\"radio\"\n                id=\"metric\"\n                name=\"unit\"\n                value=\"metric\"\n                onChange={e => this.setState({ unit: 'metric' })}\n              />\n              <label for=\"metric\">Metric</label><br/>\n            </div>\n\n            <button className=\"zip-button\" type=\"submit\">Submit</button>\n\n          </form>\n          {/** Conditionally render this component */}\n          {this.renderWeather()}\n\n          <div className=\"app-status\">\n            App status: {status}\n          </div>\n\n        </div>\n      );\n    }\n}\n\nexport default Weather","import React, { Component } from 'react';\nimport './navbar.css'\n\nclass Navbar extends Component {\n    render() {\n        return (\n            <div className='navbar'>\n                <ul>\n                    <li>\n                        <h3>Weather NOW!</h3>\n                    </li>\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Navbar","import React, { Component } from 'react'\nimport './footer.css'\n\nclass Footer extends Component {\n    render() {\n        return (\n            <div className='footer'>\n                <ul>\n                    <li><a href='https://github.com/stasi815/TaDa-'>GitHub Stylesheet</a></li>\n                    <li><a href='https://github.com/stasi815/Weather-API'>GitHub Project</a></li>\n                </ul>\n\n                <ul>\n                    <li><a href='https://www.linkedin.com/in/anastasia-gallardo-5182ab192/'>LinkedIn</a></li>\n                </ul>\n\n                <ul>\n                    <li><a href='https://www.makeschool.com/'>Make School</a></li>\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Footer","import React, { Component } from 'react';\nimport Weather from './Weather/Weather'\nimport Navbar from './Navbar/navbar'\nimport Footer from './Footer/footer.js'\nimport './App.css';\n\n/**\n * This example illustrates a simple react project\n * that works with an external API.\n *\n * Take note of the comments they point common\n * problems you will need to solve with React.\n *\n * There are two ideas here\n * - Input/Controlled Component Pattern\n * - Conditionally Rendering components\n *\n * The project has an input field where a user will\n * input a zip code. It finds weather data for that\n * zip and displays it in a component.\n *\n * */\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n      <Weather />\n      <Footer />\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './shippd.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}